#!/usr/bin/env python
# -*- coding: utf-8 -*-

import inspect
import os
import sys

from pyload import PKGDIR

from ..thriftbackend.thriftgen import ttypes
from ..thriftbackend.thriftgen.pyload import Iface

sys.path.append(os.path.join(PKGDIR, "core", "remote"))


def main():

    enums = []
    classes = []

    print("generating lightweight ttypes.py")

    for name in dir(ttypes):
        klass = getattr(ttypes, name)

        if (
            name in ("TBase", "TExceptionBase")
            or name.startswith("_")
            or not (
                issubclass(klass, ttypes.TBase)
                or issubclass(klass, ttypes.TExceptionBase)
            )
        ):
            continue

        if hasattr(klass, "thrift_spec"):
            classes.append(klass)
        else:
            enums.append(klass)

    with open("ttypes.py", mode="w") as f:

        f.write(
            """# -*- coding: utf-8 -*-

# Autogenerated by pyload
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

class BaseObject(object):
    __slots__ = []

"""
        )

        # generate enums
        for enum in enums:
            name = enum.__name__
            f.write(f"class {name}:\n")

            for attr in dir(enum):
                if attr.startswith("_") or attr in ("read", "write"):
                    continue
                value = getattr(enum, attr)
                f.write(f"\t{attr} = {value}\n")

            f.write("\n")

        for klass in classes:
            name = klass.__name__
            base = (
                "Exception"
                if issubclass(klass, ttypes.TExceptionBase)
                else "BaseObject"
            )
            f.write(f"class {name}({base}):\n")
            f.write(f"\t__slots__ = {klass.__slots__}\n\n")

            # create init
            args = ["self"] + [f"{x}=None" for x in klass.__slots__]
            params = ", ".join(args)
            f.write(f"\tdef __init__({params}):\n")
            for attr in klass.__slots__:
                f.write(f"\t\tself.{attr} = {attr}\n")

            f.write("\n")

        f.write("class Iface:\n")

        for name in dir(Iface):
            if name.startswith("_"):
                continue

            func = inspect.getargspec(getattr(Iface, name))

            params = ", ".join(func.args)
            f.write(f"\tdef {name}({params}):\n\t\tpass\n")

        f.write("\n")


if __name__ == "__main__":
    main()
